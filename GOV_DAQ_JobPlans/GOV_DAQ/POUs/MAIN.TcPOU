<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{df98a920-9144-46ba-8bac-80a878f0c15f}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Purpose: (1) Takes 4-20mA as an input AND scales TO output a %Position assuming a linear relationship
		 (2) 

Inputs: (1) Servo-motor position indicator 4-20mA innput to EL3114
		(2) .... (0-10 V) input to EL3104

Outputs: No physical outputs. DAQ acquires data, processes it, and displays it as scope data. 
		 Users can may optionally use analytics tooling available in TwinCAT 3. Otherwise, data
		 can be exported as a .CSV file for analysis/record purposes in programs such as Excel or
		 MATLAB.

Notes:
(1) There is some fixed error in the calculation - 100% is never reach, but we get close ~99.9%!
(2) There are overcurrent protections (fuses) but no external overvoltage protections. Please double check
	the EL3104 will not be damaged with max input voltage of proccess variable being measured (card 
	can handle max. 10V)

	
(3) This is the ST version of the codebase. The most straightforward, but hard to read, implementation. 
	Should be used when the FB solution using function block diagrams is not working and a quick fix is
	needed. This project is missing a scope project, which will need to be added when PLC is online (if
	needed).
*)

PROGRAM MAIN
VAR CONSTANT
	//User defined
	startVal_mA : UINT := 6530;
	startVal_volt : UINT := 0;
	startVal_mA_EU : REAL := 3.95;
	startVal_volt_EU : UINT := 0;
	
	rDAQTomA : REAL := (20 - 4)/(32768.0 - startVal_mA);
	rDAQtoVoltage : REAL := 10/(32768.0 - startVal_volt);
	rVoltageToPressure : REAL := 300.0; //PSIG per Volt
	rmAToPercentPos : REAL := 100.0/(20 - startVal_mA_EU);
END_VAR

VAR
	pressureTransOne_pressure : REAL;
	pressureTransTwo_pressure : REAL;
	percentPos : REAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//GOV feedback %Position
percentPos := (((GVL.nCurrent_Input1 - startVal_mA) * rDAQTomA) - startVal_mA_EU) * rmAToPercentPos;
pressureTransOne_pressure := (((GVL.nVoltage_Input1 - startVal_volt_EU) * rDAQtoVoltage) - startVal_volt_EU) * rVoltageToPressure;
pressureTransOne_pressure := (((GVL.nVoltage_Input2 - startVal_volt_EU) * rDAQtoVoltage) - startVal_volt_EU) * rVoltageToPressure;

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>